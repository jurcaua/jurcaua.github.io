{"version":3,"sources":["ReadOnlyCopyField.js","App.js","serviceWorker.js","index.js"],"names":["styles","inline","display","align","text","fontSize","textAlign","marginTop","emailRef","copyToClipboard","e","select","document","execCommand","target","focus","ReadOnlyCopyField","_ref","react_default","a","createElement","TextField_default","style","variant","value","inputRef","textArea","InputProps","endAdornment","queryCommandSupported","InputAdornment_default","position","IconButton_default","onClick","Icon_default","readOnly","root","flexGrow","width","title","subtitle","App","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","handleChange","event","setState","currentTab","state","email","_this$state","className","AppBar_default","color","Typography_default","src_ReadOnlyCopyField","Tabs_default","onChange","centered","index_es","Tab_default","label","icon","disabled","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"wYAMMA,EAAS,CACbC,OAAQ,CACNC,QAAS,cACTC,MAAO,UAGTC,KAAM,CACJC,SAAU,OACVC,UAAW,SACXC,UAAW,OACXL,QAAS,cACTC,MAAO,WAIPK,EAAW,KAETC,EAAkB,SAAAC,GACtBF,EAASG,SACTC,SAASC,YAAY,QACrBH,EAAEI,OAAOC,SAkCIC,EAlBW,SAAAC,GAAc,IAAXb,EAAWa,EAAXb,KAC3B,OACEc,EAAAC,EAAAC,cAAA,OAAKjB,MAAM,UACTe,EAAAC,EAAAC,cAACC,EAAAF,EAAD,CACEG,MAAOtB,EAAOI,KACdmB,QAAQ,WACRC,MAAOpB,EACPqB,SAAU,SAAAC,GAAQ,OAAKlB,EAAWkB,GAClCC,WAAY,CACVC,aArBJhB,SAASiB,sBAAsB,QAE/BX,EAAAC,EAAAC,cAACU,EAAAX,EAAD,CAAgBY,SAAS,OACvBb,EAAAC,EAAAC,cAACY,EAAAb,EAAD,CAAYG,MAAOtB,EAAOC,OAAQgC,QAASxB,GACzCS,EAAAC,EAAAC,cAACc,EAAAf,EAAD,CAAMG,MAAO,CAAEjB,SAAU,SAAzB,eAKD,KAaCiB,MAAO,CAAEjB,SAAU,IACnB8B,UAAU,OC5CdnC,EAAS,CACboC,KAAM,CACJC,SAAU,EACVC,MAAO,QAGTrC,OAAQ,CACNC,QAAS,cACTC,MAAO,UAGToC,MAAO,CACLlC,SAAU,OACVC,UAAW,SACXC,UAAW,QAGbiC,SAAU,CACRnC,SAAU,OACVC,UAAW,SACXC,UAAW,SAuDAkC,cAlDb,SAAAA,EAAYC,GAAO,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAL,IACjBE,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAH,GAAAQ,KAAAH,KAAMJ,KAORQ,aAAe,SAACC,EAAO3B,GACrBmB,EAAKS,SAAS,CAAEC,WAAY7B,KAP5BmB,EAAKW,MAAQ,CACXD,WAAY,EACZE,MAAO,qBAJQZ,wEAYV,IAAAa,EACuBV,KAAKQ,MAA3BD,EADDG,EACCH,WAAYE,EADbC,EACaD,MAEpB,OACErC,EAAAC,EAAAC,cAAA,OAAKqC,UAAWzD,EAAOoC,MACrBlB,EAAAC,EAAAC,cAACsC,EAAAvC,EAAD,CAAQY,SAAS,SAAS4B,MAAM,WAC9BzC,EAAAC,EAAAC,cAACwC,EAAAzC,EAAD,CAAYG,MAAOtB,EAAOuC,MAAOhB,QAAQ,MAAzC,oBAGAL,EAAAC,EAAAC,cAACyC,EAAD,CAAmBzD,KAAMmD,IACzBrC,EAAAC,EAAAC,cAAC0C,EAAA3C,EAAD,CAAMK,MAAO6B,EAAYU,SAAUjB,KAAKI,aAAcc,UAAQ,GAC5D9C,EAAAC,EAAAC,cAAC6C,EAAA,EAAD,CAAS1B,MAAM,+BACbrB,EAAAC,EAAAC,cAAC8C,EAAA/C,EAAD,CAAKgD,MAAM,KAAKC,KAAMlD,EAAAC,EAAAC,cAAA,KAAGqC,UAAU,kBAAb,WAExBvC,EAAAC,EAAAC,cAAC6C,EAAA,EAAD,CAAS1B,MAAM,oCACbrB,EAAAC,EAAAC,cAAC8C,EAAA/C,EAAD,CACEkD,UAAQ,EACRF,MAAM,WACNC,KAAMlD,EAAAC,EAAAC,cAAA,KAAGqC,UAAU,kBAAb,iBAGVvC,EAAAC,EAAAC,cAAC6C,EAAA,EAAD,CAAS1B,MAAM,kBACbrB,EAAAC,EAAAC,cAAC8C,EAAA/C,EAAD,CACEkD,UAAQ,EACRF,MAAM,YACNC,KAAMlD,EAAAC,EAAAC,cAAA,KAAGqC,UAAU,kBAAb,wBAKE,IAAfJ,GAAoBnC,EAAAC,EAAAC,cAAA,0CACL,IAAfiC,GAAoBnC,EAAAC,EAAAC,cAAA,YACL,IAAfiC,GAAoBnC,EAAAC,EAAAC,cAAA,oBA7CXkD,aCrBEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO3D,EAAAC,EAAAC,cAAC0D,EAAD,MAASlE,SAASmE,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.26571a0e.chunk.js","sourcesContent":["import React from \"react\";\r\nimport Icon from \"@material-ui/core/Icon\";\r\nimport IconButton from \"@material-ui/core/IconButton\";\r\nimport InputAdornment from \"@material-ui/core/InputAdornment\";\r\nimport TextField from \"@material-ui/core/TextField\";\r\n\r\nconst styles = {\r\n  inline: {\r\n    display: \"inline-flex\",\r\n    align: \"center\"\r\n  },\r\n\r\n  text: {\r\n    fontSize: \"20px\",\r\n    textAlign: \"center\",\r\n    marginTop: \"10px\",\r\n    display: \"inline-flex\",\r\n    align: \"center\"\r\n  }\r\n};\r\n\r\nlet emailRef = null;\r\n\r\nconst copyToClipboard = e => {\r\n  emailRef.select();\r\n  document.execCommand(\"copy\");\r\n  e.target.focus();\r\n};\r\n\r\nconst getCopyButton = () => {\r\n  if (document.queryCommandSupported(\"copy\")) {\r\n    return (\r\n      <InputAdornment position=\"end\">\r\n        <IconButton style={styles.inline} onClick={copyToClipboard}>\r\n          <Icon style={{ fontSize: \"20px\" }}>file_copy</Icon>\r\n        </IconButton>\r\n      </InputAdornment>\r\n    );\r\n  }\r\n  return null;\r\n};\r\n\r\nconst ReadOnlyCopyField = ({ text }) => {\r\n  return (\r\n    <div align=\"center\">\r\n      <TextField\r\n        style={styles.text}\r\n        variant=\"outlined\"\r\n        value={text}\r\n        inputRef={textArea => (emailRef = textArea)}\r\n        InputProps={{\r\n          endAdornment: getCopyButton(),\r\n          style: { fontSize: 15 },\r\n          readOnly: true\r\n        }}\r\n      />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ReadOnlyCopyField;\r\n","import React, { Component } from \"react\";\nimport Typography from \"@material-ui/core/Typography\";\nimport AppBar from \"@material-ui/core/AppBar\";\nimport Tabs from \"@material-ui/core/Tabs\";\nimport Tab from \"@material-ui/core/Tab\";\nimport { Tooltip, TextField } from \"@material-ui/core\";\n\nimport ReadOnlyCopyField from \"./ReadOnlyCopyField\";\n\nconst styles = {\n  root: {\n    flexGrow: 1,\n    width: \"100%\"\n  },\n\n  inline: {\n    display: \"inline-flex\",\n    align: \"center\"\n  },\n\n  title: {\n    fontSize: \"50px\",\n    textAlign: \"center\",\n    marginTop: \"10px\"\n  },\n\n  subtitle: {\n    fontSize: \"20px\",\n    textAlign: \"center\",\n    marginTop: \"10px\"\n  }\n};\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      currentTab: 0,\n      email: \"jurcaua@gmail.com\"\n    };\n  }\n\n  handleChange = (event, value) => {\n    this.setState({ currentTab: value });\n  };\n\n  render() {\n    const { currentTab, email } = this.state;\n\n    return (\n      <div className={styles.root}>\n        <AppBar position=\"static\" color=\"default\">\n          <Typography style={styles.title} variant=\"h2\">\n            Alexander Jurcau\n          </Typography>\n          <ReadOnlyCopyField text={email} />\n          <Tabs value={currentTab} onChange={this.handleChange} centered>\n            <Tooltip title=\"Summary, contact info, etc.\">\n              <Tab label=\"Me\" icon={<i className=\"material-icons\">face</i>} />\n            </Tooltip>\n            <Tooltip title=\"Notable projects and experience.\">\n              <Tab\n                disabled\n                label=\"Projects\"\n                icon={<i className=\"material-icons\">laptop_mac</i>}\n              />\n            </Tooltip>\n            <Tooltip title=\"Things I like.\">\n              <Tab\n                disabled\n                label=\"Interests\"\n                icon={<i className=\"material-icons\">favorite_border</i>}\n              />\n            </Tooltip>\n          </Tabs>\n        </AppBar>\n        {currentTab === 0 && <p>This is a work in progress :)</p>}\n        {currentTab === 1 && <div />}\n        {currentTab === 2 && <div />}\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}